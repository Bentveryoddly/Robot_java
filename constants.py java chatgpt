// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot;

/**
 * The Constants class provides a convenient place for teams to hold robot-wide numerical or boolean
 * constants. This class should not be used for any other purpose. All constants should be declared
 * globally (i.e. public static). Do not put anything functional in this class.
 *
 * <p>It is advised to statically import this class (or one of its inner classes) wherever the
 * constants are needed, to reduce verbosity.
 */


import edu.wpi.first.math.geometry.Translation2d;
import edu.wpi.first.math.kinematics.SwerveDriveKinematics;
import edu.wpi.first.math.trajectory.TrapezoidProfile;
import edu.wpi.first.math.util.Units;
import com.revrobotics.CANSparkMax;
 

public class Constants {

    public static class NeoMotorConstants {
        public static final double kFreeSpeedRpm = 5676;
    }

    public static class DriveConstants {
        public static final double kMaxSpeedMetersPerSecond = 3.0;
        public static final double kMaxAngularSpeed = 2 * Math.PI;  // radians per second

        public static final double kDirectionSlewRate = 1.2;  // radians per second
        public static final double kMagnitudeSlewRate = 1.8;  // percent per second (1 = 100%)
        public static final double kRotationalSlewRate = 2.0;  // percent per second (1 = 100%)

        public static final double kTrackWidth = Units.inchesToMeters(27.875);
        public static final double kWheelBase = Units.inchesToMeters(24.25);

        public static final Translation2d[] kModulePositions = {
            new Translation2d(kWheelBase / 2, kTrackWidth / 2),
            new Translation2d(kWheelBase / 2, -kTrackWidth / 2),
            new Translation2d(-kWheelBase / 2, kTrackWidth / 2),
            new Translation2d(-kWheelBase / 2, -kTrackWidth / 2)
        };
        public static final SwerveDriveKinematics kDriveKinematics = new SwerveDriveKinematics(kModulePositions);

        public static final double kFrontLeftChassisAngularOffset = -Math.PI / 2;
        public static final double kFrontRightChassisAngularOffset = 0;
        public static final double kBackLeftChassisAngularOffset = Math.PI;
        public static final double kBackRightChassisAngularOffset = Math.PI / 2;

        public static final int kFrontLeftDrivingCanId = 16;
        public static final int kRearLeftDrivingCanId = 18;
        public static final int kFrontRightDrivingCanId = 12;
        public static final int kRearRightDrivingCanId = 14;

        public static final int kFrontLeftTurningCanId = 15;
        public static final int kRearLeftTurningCanId = 17;
        public static final int kFrontRightTurningCanId = 11;
        public static final int kRearRightTurningCanId = 13;

        public static final boolean kGyroReversed = false;
    }

    public static class ModuleConstants {
        public static final int kDrivingMotorPinionTeeth = 14;

        public static final boolean kTurningEncoderInverted = true;

        public static final double kDrivingMotorFreeSpeedRps = NeoMotorConstants.kFreeSpeedRpm / 60;
        public static final double kWheelDiameterMeters = 0.0762;
        public static final double kWheelCircumferenceMeters = kWheelDiameterMeters * Math.PI;
        public static final double kDrivingMotorReduction = (45.0 * 22) / (kDrivingMotorPinionTeeth * 15);
        public static final double kDriveWheelFreeSpeedRps = (kDrivingMotorFreeSpeedRps * kWheelCircumferenceMeters) / kDrivingMotorReduction;

        public static final double kDrivingEncoderPositionFactor = (kWheelDiameterMeters * Math.PI) / kDrivingMotorReduction;
        public static final double kDrivingEncoderVelocityFactor = ((kWheelDiameterMeters * Math.PI) / kDrivingMotorReduction) / 60.0;

        public static final double kTurningEncoderPositionFactor = 2 * Math.PI;  // radian
        public static final double kTurningEncoderVelocityFactor = (2 * Math.PI) / 60.0;  // radians per second

        public static final double kTurningEncoderPositionPIDMinInput = 0;  // radian
        public static final double kTurningEncoderPositionPIDMaxInput = kTurningEncoderPositionFactor;  // radian

        public static final double kDrivingP = 0.04;
        public static final double kDrivingI = 0;
        public static final double kDrivingD = 0;
        public static final double kDrivingFF = 1 / kDriveWheelFreeSpeedRps;
        public static final double kDrivingMinOutput = -1;
        public static final double kDrivingMaxOutput = 1;

        public static final double kTurningP = 1;
        public static final double kTurningI = 0;
        public static final double kTurningD = 0;
        public static final double kTurningFF = 0;
        public static final double kTurningMinOutput = -1;
        public static final double kTurningMaxOutput = 1;

        public static final CANSparkMax.IdleMode kDrivingMotorIdleMode = CANSparkMax.IdleMode.kBrake;
        public static final CANSparkMax.IdleMode kTurningMotorIdleMode = CANSparkMax.IdleMode.kBrake;

        public static final int kDrivingMotorCurrentLimit = 50;  // amp
        public static final int kTurningMotorCurrentLimit = 20;  // amp
    }

    public static class OIConstants {
        public static final int kDriverControllerPort = 0;
        public static final int kOperatorControllerPort = 1;

        public static final double kDriveDeadband = 0.05;
    }

    public static class AutoConstants {
        public static final double kMaxSpeedMetersPerSecond = 1.5;
        public static final double kMaxAccelerationMetersPerSecondSquared = 1.5;
        public static final double kMaxAngularSpeedRadiansPerSecond = 2 * Math.PI;
        public static final double kMaxAngularSpeedRadiansPerSecondSquared = 2 * Math.PI;

        public static final double kPXController = 0.5;
        public static final double kPYController = 0.5;
        public static final double kPThetaController = 0.4;

        public static final TrapezoidProfile.Constraints kThetaControllerConstraints = 
            new TrapezoidProfile.Constraints(
                kMaxAngularSpeedRadiansPerSecond, kMaxAngularSpeedRadiansPerSecondSquared
            );
    }
}
